<page url="/4dsudoku" type="html5">
  <html>
    <head>
      <title>4D Sudoku</title>
      <link type="text/css" rel="stylesheet" href="/4dsudoku.css" />
			<script type="text/javascript" src="/4dsudoku.js"></script>
      <script src="/ga.js" type="text/javascript"></script>
      <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    </head>
    <body onload="init()">
      <h1>4D Sudoku</h1>
      <p>Zo oplossen dat, hoe je ook draait, het altijd een valide <a href="http://nl.wikipedia.org/wiki/Sudoku">Sudoku puzzel</a> is.</p>
      <p>Meer puzzels en info <a href="http://magictour.free.fr/sudoku6">hier</a>.</p>
      <p>Solve it in such a way that you always have a valid <a href="http://en.wikipedia.org/wiki/Sudoku">Sudoku puzzle</a>, no matter how you rotate it.</p>
      <p>More puzzles and info <a href="http://magictour.free.fr/sudoku6">here</a>.</p>
      <table>
        <caption>Draaien/Rotate</caption>
        <tr>
          <td></td>
          <td><button onclick="rotate(2,3)">XU</button></td>
          <td><button onclick="rotate(1,3)">XY</button></td>
          <td><button onclick="rotate(0,3)">XV</button></td>
        </tr>
        <tr>
          <td><button onclick="rotate(3,2)">UX</button></td>
          <td></td>
          <td><button onclick="rotate(1,2)">UY</button></td>
          <td><button onclick="rotate(0,2)">UV</button></td>
        </tr>
        <tr>
          <td><button onclick="rotate(3,1)">YX</button></td>
          <td><button onclick="rotate(2,1)">YU</button></td>
          <td></td>
          <td><button onclick="rotate(0,1)">YV</button></td>
        </tr>
        <tr>
          <td><button onclick="rotate(3,0)">VX</button></td>
          <td><button onclick="rotate(2,0)">VU</button></td>
          <td><button onclick="rotate(1,0)">VY</button></td>
          <td></td>
        </tr>
      </table>    
    </body>
  </html>
</page>

<page url="/4dsudoku.css" type="css">
  body { 
    font-family: arial, sans-serif; 
    padding-top: 0.5em; 
  }
  input {
    text-align: center;
    position: absolute;
    width: 25px;
    height: 25px;
    padding-top: 3px;
    border: 1px solid #ccc;
    box-sizing: border-box;
  }
  table {
    position: absolute;
    left: 570px;
    top: 80px;
    border: 1px solid #ccc;
  }
  p {
    width: 260px;
  }
</page>

<page url="/4dsudoku.js" type="js">
  var input =
    [[[[1,0,0],[0,0,0],[0,0,0]],
      [[0,0,0],[0,0,2],[3,0,0]],
      [[0,0,0],[0,0,0],[0,0,4]]],
     [[[0,5,0],[0,0,0],[0,0,0]],
      [[0,0,0],[0,0,0],[0,0,0]],
      [[0,0,0],[0,0,0],[0,6,0]]],
     [[[7,0,0],[0,0,0],[0,0,0]],
      [[0,0,0],[8,0,0],[0,0,0]],
      [[0,0,2],[0,0,0],[0,0,9]]]];
  
  var data = [];
  
  function init()
  {
    for (var v = -1; v <= 1; v++)
    {
      data[v] = [];
      for (var y = -1; y <= 1; y++)
      {
        data[v][y] = [];
        for (var u = -1; u <= 1; u++)
        {
          data[v][y][u] = [];
          for (var x = -1; x <= 1; x++)
          {
            var o = data[v][y][u][x] = {};
            o.el = document.body.appendChild(document.createElement("input"));
            o.el.value = input[v+1][y+1][u+1][x+1] || "";
          }
        }
      }
    }
    draw();
  }
  
  var units = {
    v: [1, 0, 0, 0],
    y: [0, 1, 0, 0],
    u: [0, 0, 1, 0],
    x: [0, 0, 0, 1]
  };
  
  function draw()
  {
    for (var v = -1; v <= 1; v++)
    {
      var vv = units.v.times(v);
      for (var y = -1; y <= 1; y++)
      {
        var vy = units.y.times(y).add(vv);
        for (var u = -1; u <= 1; u++)
        {
          var vu = units.u.times(u).add(vy);
          for (var x = -1; x <= 1; x++)
          {
            var vx = units.x.times(x).add(vu);
            var s = data[v][y][u][x].el.style;
            s.left = (vx[2] * 80 + vx[3] * 24 + 400) + "px";
            s.top = (vx[0] * 80 + vx[1] * 24 + 150) + "px";
          }
        }
      }
    }
  }
  
  Array.prototype.times = function(x)
  {
    var a = [];
    for (var i = 0; i < this.length; i++)
      a[i] = this[i] * x;
    return a;
  }
  Array.prototype.add = function(that)
  {
    var a = [];
    for (var i = 0; i < this.length; i++)
      a[i] = this[i] + that[i];
    return a;
  }
  
  var angle = Math.PI / 20;
  var cosa = Math.cos(angle);
  var sina = Math.sin(angle);
  function rotate(a, b, count)
  {
    count = count || 0;
    if (count == 10)
      return;
  
    for (var d in units)
    {
      var vec = units[d];
      var x = vec[a];
      var y = vec[b];
      vec[a] = round( cosa * x + sina * y);
      vec[b] = round(-sina * x + cosa * y);
    }
    draw();
  
    setTimeout(function() { rotate(a, b, count+1); }, 30);
  }
  
  function round(x)
  {
    return Math.abs(Math.round(x) - x) < 0.001 ? Math.round(x) : x;
  }
</page>